
local function callback(self, message_id, message, sender)
	pprint("GO callback", message_id, message, sender)
end

local function play_animation(self)

	--spine.play_anim("#spinemodel", "run", go.PLAYBACK_ONCE_FORWARD)

	
	spine.play_anim(self.url, "run", go.PLAYBACK_ONCE_FORWARD, {}, 
		function(self, message_id, message, sender)
			assert(type(message_id) ~= "string")
			pprint("GO callback", message_id, message, sender)
			if (message_id == hash("spine_animation_done")) then
				spine.play_anim(self.url, "run", go.PLAYBACK_LOOP_FORWARD, {}, callback)
			end
		end)
	--spine.play_anim(self.url, "run", go.PLAYBACK_ONCE_FORWARD)

	self.is_playing = true
end

local small_anim = {}
function small_anim.small_walk_in_callback_loop()
	spine.play_anim("/small_walk#spinemodel", "walk", go.PLAYBACK_ONCE_FORWARD, {}, function(self, message_id, message, sender)
		-- pprint("small_walk callback", message_id, message, sender)
		if message_id == hash("spine_animation_done") then
			small_anim.small_walk_in_callback_loop()
		end
	end)
end

function init(self)
	small_anim.small_walk_in_callback_loop()
	msg.post(".", "acquire_input_focus")

	self.countdown = 2
	self.url = "#spinemodel"

	--play wrong animation
	spine.play_anim(self.url, "ddd", go.PLAYBACK_LOOP_FORWARD)
	--spine.set_skin("#spinemodel", "default")
	--constants
	print("getting constants")

	print("tint:", go.get(self.url, "tint"))
	print("set tint", go.set(self.url, "tint", vmath.vector4(1,2,3,4)))
	print("tint:", go.get(self.url, "tint"))
	print("set tint", go.set(self.url, "tint.y", 0.5))
	print("tint:", go.get(self.url, "tint"))

	spine.reset_constant(self.url, "tint")

	print("setting constants")
	--spine.set_constant(self.url, "tint", vmath.vector4(1,0,0,1))
	--spine.reset_constant(self.url, "tint")

	-- skins
	--spine.set_skin(self.url, "default")
	spine.set_skin(self.url, "default")

	-- properties
	print("Properties")
	print("current animation:", go.get(self.url, "animation"))

	print("current skin:", go.get(self.url, "skin"))
	go.set(self.url, "skin", hash("default"))
	go.set(self.url, "skin", hash(""))

	--print("current playback rate:", go.get(self.url, "playback_rate"))
	--go.set(self.url, "playback_rate", 3.0)
	--go.animate(self.url, "playback_rate", go.PLAYBACK_LOOP_PINGPONG, 0.1, go.EASING_LINEAR, 2)

	-- cursor property
	--go.animate(self.url, "cursor", go.PLAYBACK_LOOP_PINGPONG, 1.0, go.EASING_LINEAR, 2)
	--go.set(self.url, "cursor", 0.5)
	--go.set(self.url, "cursor", 0.90)

	-- attachments
	timer.delay(
		1, true, function(self, handle, time_elapsed)
			local rnd = math.random()
			if rnd > 0.25 then
				spine.set_attachment(self.url, "mouth", "mouth-oooo")
			elseif rnd > 0.5 then
				spine.set_attachment(self.url, "mouth", "mouth-smile")
			elseif rnd > 0.75 then
				spine.set_attachment(self.url, "mouth", "mouth-grind")
			else
				go.delete(self.url)
			end
		end
	)
	--spine.set_attachment(self.url, "mouth", "mouth-oooo")
	--spine.set_attachment(self.url, "mouth", "mouth-smile")
	--spine.set_attachment(self.url, "mouth", "mouth-grind")

	-- bones
	local bone = spine.get_go(self.url, "gun-tip")
	--local bone = spine.get_go(self.url, "front-foot-tip")
	print("bone", bone)

	go.set_parent("blob", bone)


	-- errors
	--spine.play_anim(self.url, "not_exist", go.PLAYBACK_ONCE_FORWARD, {})
	--spine.play_anim("#not_exist", "run", go.PLAYBACK_ONCE_FORWARD, {})

	--spine.set_skin(self.url, "not_exist")

	self.bone = bone

	-- multi-track
	spine.play_anim(self.url, "idle", go.PLAYBACK_LOOP_FORWARD, { track = 1 })
	spine.play_anim(self.url, "aim", go.PLAYBACK_LOOP_FORWARD, { track = 2 })
	spine.set_ik_target(self.url, "aim-ik", "ik-target")
	
	--spine.play_anim(self.url, "shoot", go.PLAYBACK_ONCE_FORWARD, { track = 2 })
	--print("2nd track animation", go.get(self.url, "animation", { index = 2 }))
	--print("2nd track playback rate", go.get(self.url, "playback_rate", { index = 2 }))
	--print("2nd track cursor", go.get(self.url, "cursor", { index = 2 }))
	--go.set(self.url, "playback_rate", 0.05, { index = 2 })
	--go.set(self.url, "cursor", 0.2, { index = 2 })
	--print("2nd track cursor", go.get(self.url, "cursor", { index = 2 }))
	--print("2nd track playback rate", go.get(self.url, "playback_rate", { index = 2 }))

	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	self.countdown = self.countdown - 1
	if self.countdown == 0 then
		--spine.cancel("#spinemodel")
	end
end

function on_message(self, message_id, message, sender)
	pprint("message", message_id, message)
end

function on_input(self, action_id, action)
	if action_id == nil then
		go.set("ik-target", "position", vmath.vector3(action.x, action.y, 0))

		--spine.set_ik_target_position(self.url, "aim-ik", go.get("ik-target", "position"))
		
	elseif action_id == hash("mouse_button_right") and action.pressed then
		if self.is_playing then
			spine.cancel(self.url, { track = 1 })
			self.is_playing = false
		else
			play_animation(self)
		end
	elseif action_id == hash("mouse_button_left") and action.pressed then
		spine.play_anim(self.url, "shoot", go.PLAYBACK_ONCE_FORWARD, { track = 3 })
		--go.set(self.url, "playback_rate", 0.05, { index = 2 })
		--go.set(self.url, "cursor", 0.2, { index = 2 })
	end
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
